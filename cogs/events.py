import settings
import discord
import typing
from pymongo import MongoClient
from discord.ext import commands
from discord import app_commands
from config.config import mongoconf
import time

cluster = MongoClient(f"{mongoconf.uri}")
db = cluster.db
collect = db.event

class events(commands.Cog):

    def __init__(self, client):
        self.client = client

    @app_commands.command(name="evmanage", description="–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–∞—Ç–æ–º –∏–≤–µ—Ç–æ–≤")
    async def eventmanage(
            self, interaction: discord.Interaction,
            –¥–µ–π—Å—Ç–≤–∏–µ: typing.Literal['–æ—Ç–∫—Ä—ã—Ç—å', '–∑–∞–∫—Ä—ã—Ç—å']
    ):
        channel = self.client.get_channel(settings.channels.event_logs)
        role = interaction.guild.get_role(1142038601220235314)
        ch = interaction.guild.get_channel(1142025152398376980)
        rolemembers = interaction.guild.get_role(1146028746680311839)

        if role not in interaction.user.roles:
            await interaction.response.send_message(
                '*–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ä–æ–ª—å <@&1142038601220235314>*', ephemeral=True)
            return
        elif role in interaction.user.roles:
            if –¥–µ–π—Å—Ç–≤–∏–µ == '–æ—Ç–∫—Ä—ã—Ç—å':
                embed = discord.Embed(
                    title="üéÄ | –ò–≤–µ–Ω—Ç—ã",
                    description=f"***–ß–∞—Ç –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –∏–≤–µ–Ω—Ç–æ—Ä–æ–º <@{interaction.user.id}>***\n\n***–î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!***",
                    color=0xd09248
                )
                embed.set_footer(icon_url=settings.misc.avatar_url, text=settings.misc.footer)
                await ch.set_permissions(rolemembers, read_messages=True, send_messages=True)
                embed=discord.Embed(
                    title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–æ–≤",
                    description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{interaction.author}** –æ—Ç–∫—Ä—ã–ª —á–∞—Ç-–∏–≤–µ–Ω—Ç–æ–≤!",
                    color=0x774177
                )
                embed.add_field(name="–î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è", value=f"<t:{time.time()}>", inline=False)
                embed.add_field(name="–ê–π–¥–∏ –∏–≤–µ–Ω—Ç–æ—Ä–∞", value=interaction.author.id, inline=False)
                await channel.send()
            if –¥–µ–π—Å—Ç–≤–∏–µ == '–∑–∞–∫—Ä—ã—Ç—å':
                embed = discord.Embed(
                    title="üéÄ | –ò–≤–µ–Ω—Ç—ã",
                    description=f"***–ß–∞—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –∏–≤–µ–Ω—Ç–æ—Ä–æ–º <@{interaction.user.id}>***",
                    color=0xd09248
                )
                embed.set_footer(icon_url=settings.misc.avatar_url, text=settings.misc.footer)
                await ch.set_permissions(rolemembers, read_messages=True, send_messages=False)
                embed=discord.Embed(
                    title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–æ–≤",
                    description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{interaction.author}** –∑–∞–∫—Ä—ã–ª —á–∞—Ç-–∏–≤–µ–Ω—Ç–æ–≤!",
                    color=0x774177
                )
                embed.add_field(name="–î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è", value=f"<t:{time.time()}>", inline=False)
                embed.add_field(name="–ê–π–¥–∏ –∏–≤–µ–Ω—Ç–æ—Ä–∞", value=interaction.author.id, inline=False)
                await channel.send()
            await ch.send(embed=embed)
            await interaction.response.send_message('*–ì–æ—Ç–æ–≤–æ!*', ephemeral=True)

    @app_commands.command(name = "topmanage", description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
    async def topmanage(
            self, interaction: discord.Interaction,
            –¥–µ–π—Å—Ç–≤–∏–µ: typing.Literal['–¥–æ–±–∞–≤–∏—Ç—å', '—É–±–∞–≤–∏—Ç—å'],
            –∞–π–¥–∏: typing.Optional[str],
            —á–∏—Å–ª–æ: typing.Optional[int]
    ):
        channel = self.client.get_channel(settings.channels.event_logs)
        role = interaction.guild.get_role(1142038601220235314)
        fnd = {'_id': –∞–π–¥–∏}

        if –∞–π–¥–∏ is None or —á–∏—Å–ª–æ is None: await interaction.response.send_message(f'*–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã!*', ephemeral=True)
        if role not in interaction.user.roles: await interaction.response.send_message('*–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤! –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å —Ä–æ–ª—å <@&1142038601220235314>*', ephemeral=True)
        elif role in interaction.user.roles:
            if —á–∏—Å–ª–æ < 1: await interaction.response.send_message(f'*–ß–∏—Å–ª–æ **{—á–∏—Å–ª–æ}** –º–µ–Ω—å—à–µ –µ–¥–∏–Ω–∏—Ü—ã!*', ephemeral=True)

            if –¥–µ–π—Å—Ç–≤–∏–µ == '–¥–æ–±–∞–≤–∏—Ç—å':
                if collect.count_documents(fnd) == 1:
                    cnt = collect.find_one(fnd)['count']
                    collect.update_one(fnd, {'$set': {'count': cnt + —á–∏—Å–ª–æ}})
                elif collect.count_documents(fnd) == 0:
                    collect.insert_one({'_id': –∞–π–¥–∏, 'count': —á–∏—Å–ª–æ})
                await interaction.response.send_message(f'*–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É <@{int(–∞–π–¥–∏)}> **{—á–∏—Å–ª–æ}** –ø–æ–±–µ–¥!*')
                embed=discord.Embed(
                    title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–æ–≤",
                    description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{interaction.author}** –¥–æ–±–∞–≤–∏–ª –ø–æ–±–µ–¥—ã —á–µ–ª–æ–≤–µ–∫—É <@{int(–∞–π–¥–∏)}> –Ω–∞ `{—á–∏—Å–ª–æ}`!",
                    color=0x774177
                )
                embed.add_field(name="–î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è", value=f"<t:{time.time()}>", inline=False)
                embed.add_field(name="–ê–π–¥–∏ –∏–≤–µ–Ω—Ç–æ—Ä–∞", value=interaction.author.id, inline=False)
                embed.add_field(name="–ê–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", value=–∞–π–¥–∏, inline=False)
                await channel.send()
            if –¥–µ–π—Å—Ç–≤–∏–µ == '—É–±–∞–≤–∏—Ç—å':
                if collect.count_documents(fnd) == 0: await interaction.response.send_message(f'*–£—á–∞—Å—Ç–Ω–∏–∫–∞ <@{int(–∞–π–¥–∏)}> –Ω–µ—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —á–∏—Å–ª–æ –ø–æ–±–µ–¥!*')
                if collect.count_documents(fnd) == 1:
                    cnt = collect.find_one(fnd)['count']
                    if —á–∏—Å–ª–æ > cnt: await interaction.response.send_message(f'*–ß–∏—Å–ª–æ **{—á–∏—Å–ª–æ}** –±–æ–ª—å—à–µ —á–µ–º —á–∏—Å–ª–æ –ø–æ–±–µ–¥!*', ephemeral=True)
                    else:
                        collect.update_one(fnd, {'$set': {'count': cnt - —á–∏—Å–ª–æ}})
                        await interaction.response.send_message(f'*–í—ã —É—Å–ø–µ—à–Ω–æ —É–±–∞–≤–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ <@{int(–∞–π–¥–∏)}> –Ω–∞ **{—á–∏—Å–ª–æ}***')
                
                embed=discord.Embed(
                    title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–æ–≤",
                    description=f"–£—á–∞—Å—Ç–Ω–∏–∫ **{interaction.author}** —É–±–∞–≤–∏–ª –ø–æ–±–µ–¥—ã —á–µ–ª–æ–≤–µ–∫—É <@{int(–∞–π–¥–∏)}> –Ω–∞ `{—á–∏—Å–ª–æ}`!",
                    color=0x774177
                )
                embed.add_field(name="–î–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è", value=f"<t:{time.time()}>", inline=False)
                embed.add_field(name="–ê–π–¥–∏ –∏–≤–µ–Ω—Ç–æ—Ä–∞", value=interaction.author.id, inline=False)
                embed.add_field(name="–ê–π–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞", value=–∞–π–¥–∏, inline=False)
                await channel.send()
            

    @app_commands.command(name="evtop", description="–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
    async def evtop(
            self, interaction: discord.Interaction
    ):
        lst = []
        for query in collect.find():
            if query['count'] == 1: txt = "–ø–æ–±–µ–¥–∞"
            if query['count'] != 1: txt = "–ø–æ–±–µ–¥"

            lst.append(f'<a:1041076662546219168:1041076662546219168> <@{query["_id"]}> ‚Äî ***{query["count"]}*** {txt}')

        embed = discord.Embed(
            title = "üéá | –î–æ—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π",
            description = "\n".join(lst),
            color = 0xfaa821
        )
        embed.set_footer(icon_url=settings.misc.avatar_url, text=settings.misc.footer)

        await interaction.response.send_message(embed=embed)













        
async def setup(client):
    await client.add_cog(events(client))
