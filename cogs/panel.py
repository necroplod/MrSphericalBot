import discord
import datetime
import settings
from config.config import Panel
from discord.ext import commands
from discord.ui.view import View
from discord.ui.modal import Modal

global author
class Auth_panel(Modal, title = 'üéÜ | –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'):
    login = discord.ui.TextInput(
        label = '–õ–æ–≥–∏–Ω',
        placeholder = 'KrytoyAdmin2006 :)'
    )
    pwd = discord.ui.TextInput(
        label = '–ü–∞—Ä–æ–ª—å',
        placeholder = 'qwerty123456'
    )
    async def on_submit(self, interaction: discord.Interaction):
        if self.login.value == Panel.login:
            if self.pwd.value in Panel.pwds:
                logs = discord.utils.get(interaction.guild.channels, id=settings.channels.logs)
                embed = discord.Embed(
                    title='üé≤ | –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                    description=f'''
                    **‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ:** –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    **‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:** <@{interaction.user.id}>
                    **‚Ä¢ –í—Ä–µ–º—è:** {datetime.datetime.now()}''',
                    color=0xcdc9a5
                )
                embed.set_footer(icon_url=settings.misc.avatar_url, text=settings.misc.footer)
                await logs.send(embed=embed)
                embed = discord.Embed(
                    title='üé≤ | –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
                    description='',
                    color=0xcdc9a5
                )
                embed.set_footer(icon_url=settings.misc.avatar_url, text=settings.misc.footer)
                await interaction.response.send_message(embed=embed, view = Main_panel())
            else:
                await interaction.response.send_message('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!', ephemeral = True)
        else:
            await interaction.response.send_message('–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω!', ephemeral = True)
class Cogs_panel(Modal, title = 'üé≤ | –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'):
    cog = discord.ui.TextInput(label = '–ò–º—è –∫–æ–≥–∞')
    action = discord.ui.TextInput(
        label = '–î–µ–π—Å—Ç–≤–∏–µ',
        placeholder = '–î–µ–π—Å—Ç–≤–∏—è: load, unload, reload')
    async def on_submit(self, interaction: discord.Interaction):
        cog = f'cogs.{self.cog.value}'
        action = self.action.value
        action = action.lower()
        if action == 'load':
            async def cogs_():
                await discord.ext.commands.Bot.load_extension(name = cog)
        if action == 'reload':
            async def cogs_():
                await discord.ext.commands.Bot.unload_extension(name = cog)
                await discord.ext.commands.Bot.load_extension(name = cog)
        if action == 'unload':
            async def cogs_():
                await discord.ext.commands.Bot.unload_extension(name = cog)
class Handlers_panel(Modal, title = 'üé≤ | –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'):
    handler = discord.ui.TextInput(label = '–ò–º—è —Ö—ç–Ω–¥–ª–µ—Ä–∞')
    action = discord.ui.TextInput(
        label = '–î–µ–π—Å—Ç–≤–∏–µ',
        placeholder = '–î–µ–π—Å—Ç–≤–∏—è: load, unload, reload')
    async def on_submit(self, interaction: discord.Interaction):
        handlers = f'handlers.{self.handler.value}'
        action = self.action.value
        action = action.lower()
        if action == 'load':
            async def cogs_():
                await discord.ext.commands.Bot.load_extension(name = handlers)
        if action == 'reload':
            async def cogs_():
                await discord.ext.commands.Bot.unload_extension(name = handlers)
                await discord.ext.commands.Bot.load_extension(name = handlers)
        if action == 'unload':
            async def cogs_():
                await discord.ext.commands.Bot.unload_extension(name = handlers)
class Bans_panel(Modal, title = 'üé≤ | –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'):
    one = discord.ui.TextInput(label = 'ID')
    two = discord.ui.TextInput(label = 'ID')
    three = discord.ui.TextInput(label = 'ID')
    four = discord.ui.TextInput(label = 'ID')
    reason = discord.ui.TextInput(label = '–ü—Ä–∏—á–∏–Ω–∞')
    async def on_submit(self, interaction: discord.Interaction):
        bans = list([])
        bans.append(self.one.value)
        bans.append(self.two.value)
        bans.append(self.three.value)
        bans.append(self.four.value)
        logs = discord.utils.get(interaction.guild.channels, id=settings.channels.punishments_name)
        for id in bans:
            async def ban_():
                usr = discord.ext.commands.Bot.get_user(id)
                await discord.Guild.ban(user = usr,
                                        reason = f'{self.reason.value} | {interaction.user.name}#{interaction.user.discriminator}')
                embed = discord.Embed(
                    title = 'üéØ | –ù–∞–∫–∞–∑–∞–Ω–∏—è',
                    description = f'''<a:768563657390030971:1041076662546219168> **–£—á–∞—Å—Ç–Ω–∏–∫ <@&{id}> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.**
                    <a:768563657390030971:1041076662546219168> **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** <@&{interaction.user.id}>
                    <a:768563657390030971:1041076662546219168> **–ü—Ä–∏—á–∏–Ω–∞:** {self.reason.value}''',
                    color = 0xea6363
                )
                embed.set_footer(icon_url=settings.misc.avatar_url, text=settings.misc.footer)
                await logs.send(embed=embed)

class Main_panel(discord.ui.View):
    def __init__(self, *, timeout=10):
        self.author = author
        super().__init__(timeout=timeout)

    @discord.ui.button(emoji='ü™Å', style=discord.ButtonStyle.green, label = '–£–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–≥–∞–º–∏', row = 1)
    async def cogs(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            await interaction.response.send_message(content="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!", ephemeral=True)
        await interaction.response.send_modal(Cogs_panel())

    @discord.ui.button(emoji='üéã', style=discord.ButtonStyle.grey, label = '–£–ø—Ä–∞–≤–ª—è—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä–∞–º–∏', row = 1)
    async def handlers(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            await interaction.response.send_message(content="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!", ephemeral=True)
        await interaction.response.send_modal(Handlers_panel())

    @discord.ui.button(emoji='ü¶∫', style=discord.ButtonStyle.green, label = '–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', row = 0)
    async def bans(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            await interaction.response.send_message(content="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!", ephemeral=True)
        await interaction.response.send_modal(Bans_panel())

class Auth_start(discord.ui.View):
    def __init__(self, *, timeout=60):
        self.author = author
        super().__init__(timeout=timeout)

    @discord.ui.button(emoji='ü•ä', style=discord.ButtonStyle.blurple, label = '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
    async def auth(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.author:
            await interaction.response.send_message(content="–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!", ephemeral=True)
        await interaction.response.send_modal(Auth_panel())
class panel(commands.Cog):

    def __init__(self, client):
        self.client = client

    @commands.command()
    @commands.has_any_role(952530469751255043, 952530469751255042)
    async def panel(self, ctx):
        embed = discord.Embed(
            title = 'üé≤ | –ü–∞–Ω–µ–ª—å –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
            description = '<a:768563657390030971:1041076662546219168> **–ü—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é..**',
            color = 0xcdc9a5
        )
        embed.set_footer(icon_url = self.client.user.avatar.url, text = f'{self.client.user.name} | –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã')
        author = ctx.author
        await ctx.send(embed=embed, view = Auth_start())

async def setup(client):
    await client.add_cog(panel(client))
